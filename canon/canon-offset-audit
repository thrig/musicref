#!/usr/bin/env perl
#
# Calculate interval tension sum for canonic themes under various offset
# counts and transpositions. (May come up with low tension values for
# lines that would not normally be permitted under various rule systems
# (parallel fifths or octaves, etc); something else would need to audit
# for such.)
#
# TODO support rhythm (Cope has equations and advice on this on
# subsequent pages to what used below).
#
# TODO also multiple lines against each other, as adding a 3rd or 4th
# line may change what offsets and transpositions create the overall
# most consonant combination.
#
# TODO offset, transpose should accept lists or ranges of values.
#
# TODO interval histograms (via R?) would be nice, so can see how many
# minor 3rds or what else a particular combination has. (Or lilypond
# output, to generate music for all the combinations, with intervals
# labelled.)

use strict;
use warnings;

use Getopt::Long qw(GetOptions);
use List::Util qw(max min sum);
use Music::AtonalUtil ();

GetOptions(
  'help'          => \&print_help,
  'inverse'       => \my $Flag_Inverse,
  'offset=i'      => \my $Flag_Offset,
  'ostinato'      => \my $Flag_Ostinato,
  'show-tensions' => \my $Flag_Show_Tensions,
  'transpose=i'   => \my $Flag_Transpose,
  'verbose'       => \my $Flag_Verbose,
) || print_help();

# Interval tentions taken from "Computer Models of Musical Creativity",
# Cope, p.229-230, from least tension (0.0) to greatest (1.0).
my %tensions = (
  0  => 0.0,
  1  => 1.0,
  2  => 0.8,
  3  => 0.225,
  4  => 0.2,
  5  => 0.55,
  6  => 0.65,
  7  => 0.1,
  8  => 0.275,
  9  => 0.25,
  10 => 0.7,
  11 => 0.9,
);
# Intervals greater than octave more consonant by virtue of spread
my $octave_adjust = -0.02;

########################################################################
#
# MAIN

print_help() unless @ARGV;

my $atu = Music::AtonalUtil->new;

my $Theme;
# Assume semitone pitch numbers, else try to convert note names to such.
# (Notes in particular do not (yet) support registers, so must use
# semitone pitch numbers if need that.)
if ( $ARGV[0] =~ m/^\d+/ ) {
  $Theme = [ map { /^[rR]/ ? undef : $_ } @ARGV ];
} else {
  $Theme = $atu->notes2pitches( \@ARGV );
}

my $min_offset    = 1;
my $max_offset    = min( int( @$Theme / 2 ), 4 );
my $min_transpose = -19;
my $max_transpose = 19;

if ( defined $Flag_Offset ) {
  die
    "offset must be positive integer (and ideally less than length of theme)\n"
    if $Flag_Offset < 0
      or $Flag_Offset >= @$Theme;
  $min_offset = $max_offset = $Flag_Offset;
}
if ( defined $Flag_Transpose ) {
  $min_transpose = $max_transpose = $Flag_Transpose;
}

for my $offset ( $min_offset .. $max_offset ) {
  for my $transpose ( $min_transpose .. $max_transpose ) {
    my @theme_proposta = @$Theme;
    my @theme_risposta = risposta( $Theme, $Flag_Inverse, $transpose );
    if ( $offset > 0 ) {
      unshift @theme_risposta, (undef) x $offset;
      if ($Flag_Ostinato) {
        for my $i ( 0 .. $#theme_risposta ) {
          $theme_proposta[$i] = $Theme->[ $i % @$Theme ];
        }
      }
    }

    if ($Flag_Verbose) {
      warn "P O${offset},T${transpose}\t",
        join( ' ', map { defined $_ ? $_ : 'r' } @theme_proposta ),
        "\n";
      warn "R O${offset},T${transpose}\t",
        join( ' ', map { defined $_ ? $_ : 'r' } @theme_risposta ),
        "\n";
    }

    my @tensions;
    for my $i ( 0 .. $#theme_proposta ) {
      push @tensions, tension( $theme_proposta[$i], $theme_risposta[$i] );
    }

    die "no tension\n" unless @tensions;

    my $max     = max(@tensions);
    my $min     = min(@tensions);
    my $tension = sum(@tensions);

    # compensate for fewer matching notes in larger offsets
    $tension /= @tensions;

    my $tension_str = "";
    $tension_str = " " . join( ' ', grep defined, @tensions )
      if $Flag_Show_Tensions;

    printf
      "%.03f O%d,T%d\tMin(%.03f) Max(%.03f) Mean(%.03f) SDev(%.03f)%s\n",
      $tension, $offset,
      $transpose, $min, $max, mean( \@tensions ),
      standard_deviation( \@tensions ),
      $tension_str;
  }
}

exit 0;

########################################################################
#
# SUBROUTINES

sub canonic_inverse {
  my ($theme) = @_;
  my @inverse_theme = $theme->[0];
  for my $i ( 1 .. $#$theme ) {
    if ( defined $i ) {
      # Must look back for first non-note rest, and if the canon begins
      # with rests, must catch first non-rest pitch and insert that for
      # subsequent reverse searches to find.
      for my $j ( reverse 0 .. $i - 1 ) {
        next unless defined $theme->[$j];
        $inverse_theme[$i] =
          $inverse_theme[$j] + ( -1 * ( $theme->[$i] - $theme->[$j] ) );
      }
      if ( !defined $inverse_theme[$i] ) {
        $inverse_theme[$i] = $theme->[$i];
      }
    } else {
      # copy rests
      $inverse_theme[$i] = undef;
    }
  }
  return @inverse_theme;
}

# $mean = mean(\@array) computes the mean of an array of numbers.
sub mean {
  my $arrayref  = shift;
  my $sum       = shift;
  my $is_sample = shift // 0;
  my $n         = @$arrayref;
  $n-- if $is_sample;
  unless ($sum) {
    for (@$arrayref) { $sum += $_ }
  }
  return $sum / $n;
}

sub print_help {
  warn <<"END_HELP";
Usage: $0 [options] notes or semitone numbers ...

  --help             Display this message and exit.
  --inverse          Compare theme with its inverse canonic line.
  --offset=i         Only offset the comparison line by i.
  --ostinato         Repeat theme as necessary to match offset.
  --show-tensions    Show all interval tensions in output.
  --transpose=i      Only transpose comparison line by i.
  --verbose          Show noise from lilypond, MIDI player.

Example Usage:
  $0 c g a e f c f g | sort -n

Whose output indicates that an offset of four and transposition by 12
semitones should be very consonant:

  P:  c g a e f  c  f  g
  R:  r r r r c' g' a' e' ...

While an offset of four and transposition by 4 semitones would be very
dissonant:

  P:  c g a e f  c  f   g
  R:  r r r r e  b  des aes

Among various other options more and less consonant.

END_HELP
  exit 64;
}

sub risposta {
  my ( $theme, $do_invert, $transpose_by ) = @_;
  my @risposta = $do_invert ? canonic_inverse($theme) : @$theme;
  if ( $transpose_by != 0 ) {
    for my $p (@risposta) {
      $p += $transpose_by if defined $p;
    }
  }
  return @risposta;
}

# $sd = standard_deviation_data(\@array) computes the standard
# deviation of an array of numbers.
sub standard_deviation {
  my $arrayref = shift;
  my $mean = shift || mean($arrayref);

  return sqrt( mean( [ map ( ( $_ - $mean )**2, @$arrayref ) ] ) );
}

sub tension {
  my ( $p1, $p2 ) = @_;
  return if !defined $p1 or !defined $p2;

  my $interval = abs( $p2 - $p1 );
  my $octave   = int( $interval / $atu->scale_degrees );

  my $tension =
    $tensions{ $interval % $atu->scale_degrees } +
    ( $octave > 0 ? $octave_adjust : 0 );
  $tension = 0 if $tension < 0;

  if ($Flag_Verbose) {
    my ( $n1, $n2 ) = @{ $atu->pitches2notes( [ $p1, $p2 ] ) };
    warn "compare $n1 vs $n2 ($p1 vs $p2) tension $tension\n";
  }

  return $tension;
}
